<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\{Policy, Claim, ClaimNote, User};
use Faker\Factory as Faker;
use Carbon\Carbon;
use Illuminate\Support\Str;

class ClaimSeeder extends Seeder
{
    public function run(): void
    {
        $faker = Faker::create('uk_UA');

        $policies = Policy::with('insuranceOffer.insuranceProduct')->get();
        $managers = User::where('role', 'manager')->pluck('id')->toArray();
        $adminId = User::where('role', 'admin')->value('id');

        $claims = [];

        $targetCount = 100;
        $policyCount = max(1, $policies->count());
        $claimsPerPolicy = max(1, intdiv($targetCount, $policyCount));

        foreach ($policies as $policy) {
            for ($i = 0; $i < $claimsPerPolicy; $i++) {

                $productName = $policy->insuranceOffer?->insuranceProduct?->name ?? 'Невідомий продукт';

                $causesMap = [
                    // авто
                    'Автоцивілка' => ['ДТП', 'Пошкодження іншого авто', 'Зіткнення на парковці', 'Наїзд на перешкоду'],
                    'КАСКО повна' => ['ДТП', 'Угон авто', 'Пожежа авто', 'Пошкодження скла', 'Затоплення двигуна', 'Падіння дерева'],
                    'КАСКО міні' => ['Падіння предмету', 'Подряпини невідомого походження', 'Пошкодження кузова'],
                    'Зелена карта' => ['ДТП за кордоном', 'Зіткнення на трасі', 'Пошкодження під час поїздки'],
                    'Мото/мопед' => ['Падіння мотоцикла', 'ДТП', 'Пошкодження під час транспортування', 'Крадіжка мотоцикла'],
                    'Електросамокати/велосипеди' => ['Падіння', 'Крадіжка', 'Зіткнення з перешкодою'],

                    // майно
                    'Квартира/будинок' => ['Пожежа', 'Затоплення', 'Крадіжка з проникненням', 'Вибух побутового газу', 'Вандалізм'],
                    'Оренда житла' => ['Пошкодження майна орендодавця', 'Псування майна орендарем', 'Пожежа', 'Затоплення'],
                    'Будівельно-монтажні роботи' => ['Пошкодження техніки', 'Падіння конструкції', 'Травма працівника', 'Порушення технології робіт'],

                    // спеціальні категорії
                    'Страхування зброї' => ['Втрата зброї', 'Крадіжка сейфу', 'Нещасний випадок зі зброєю', 'Пошкодження під час зберігання'],
                    'Мобільні пристрої' => ['Крадіжка телефону', 'Падіння і розбиття екрана', 'Потрапляння вологи', 'Пошкодження акумулятора'],

                    // здоров’я / життя
                    'Приватне медичне страхування' => ['Госпіталізація', 'Операція', 'Стаціонарне лікування', 'Амбулаторне лікування'],
                    'Додаткове медичне страхування' => ['Амбулаторне лікування', 'Діагностика', 'Ліки за рецептом'],
                    'Стоматологічне страхування' => ['Лікування карієсу', 'Видалення зуба', 'Протезування', 'Травма зубів'],
                    'Нещасні випадки' => ['Травма', 'Перелом', 'Опік', 'Травма на виробництві'],
                    'Медичне при ДТП' => ['Травма у ДТП', 'Швидка допомога', 'Діагностика після ДТП'],
                    'Догляд за хворими' => ['Догляд вдома', 'Сестринський догляд', 'Паліативний догляд'],
                    'Критичні захворювання' => ['Діагноз онкології', 'Інфаркт', 'Інсульт', 'Ниркова недостатність'],
                    'Страхування життя' => ['Інвалідність', 'Смерть застрахованої особи'],

                    // подорожі
                    'Подорожі за кордон' => ['Втрата багажу', 'Затримка рейсу', 'Медична допомога за кордоном', 'Скасування поїздки'],
                    'Подорожі Україною' => ['Втрата багажу', 'Скасування поїздки', 'Травма під час подорожі'],

                    // тварини
                    'Медичне страхування тварин' => ['Хірургічне втручання', 'Отруєння', 'Травма тварини', 'Інфекційне захворювання'],
                    'Відповідальність власника тварини' => ['Укус собаки', 'Пошкодження майна третіх осіб', 'Травма перехожого'],
                ];

                $descriptionMap = [
                    // авто
                    'ДТП' => 'Сталася дорожньо-транспортна пригода з пошкодженням транспортного засобу. Викликано поліцію та складено протокол.',
                    'Пошкодження іншого авто' => 'Під час маневрування зачеплено припаркований автомобіль. Оформлено європротокол.',
                    'Зіткнення на парковці' => 'На стоянці відбулося легке зіткнення з іншим ТЗ. Є фотофіксація.',
                    'Наїзд на перешкоду' => 'Водій здійснив наїзд на бордюр/перешкоду. Пошкоджено диски та підвіс.',
                    'Угон авто' => 'Автомобіль зник зі стоянки. Подано заяву до поліції, оголошено розшук.',
                    'Пожежа авто' => 'Зафіксовано загоряння моторного відсіку. Пожежу ліквідовано, авто пошкоджене.',
                    'Пошкодження скла' => 'Внаслідок удару каменем тріщина на лобовому склі. Потрібна заміна.',
                    'Затоплення двигуна' => 'Авто потрапило у воду, зафіксовано гідроудар. Проведено евакуацію ТЗ.',
                    'Падіння дерева' => 'На автомобіль впала гілка/дерево під час негоди. Є свідки події.',
                    'Падіння предмету' => 'Пошкодження кузова через падіння стороннього предмета. Фото додано.',
                    'Подряпини невідомого походження' => 'Виявлено подряпини на кузові після паркування. Винуватця не знайдено.',
                    'ДТП за кордоном' => 'ДТП під час подорожі за межами України. Складено документи місцевою поліцією.',
                    'Зіткнення на трасі' => 'Легке зіткнення під час руху трасою. Викликано дорожню поліцію.',
                    'Пошкодження під час поїздки' => 'Виявлено механічні пошкодження під час міжнародної поїздки.',
                    'Падіння мотоцикла' => 'Під час маневру мотоцикл перекинувся, мотоцикліст незначно травмований.',
                    'Пошкодження під час транспортування' => 'Під час перевезення мотоцикла виявлено пошкодження пластика.',
                    'Крадіжка мотоцикла' => 'Зник мотоцикл з місця стоянки. Подано заяву до поліції.',
                    'Падіння' => 'Сталося падіння з електросамоката/велосипеда. Пошкодження рами та обшивки.',
                    'Крадіжка' => 'Невідомі викрали транспортний засіб/майно. Подано заяву до поліції.',
                    'Зіткнення з перешкодою' => 'Під час руху відбулося зіткнення з перешкодою. Пошкоджено передню частину.',

                    // майно
                    'Пожежа' => 'У приміщенні сталася пожежа. Пошкоджено майно, складено акт ДСНС.',
                    'Затоплення' => 'Прорив труби призвів до затоплення. Пошкоджено підлогу та меблі.',
                    'Крадіжка з проникненням' => 'Виявлено сліди злому, викрадено техніку. Поліцію викликано.',
                    'Вибух побутового газу' => 'Стався вибух газу, частково зруйновано перекриття. Потерпілих немає/є.',
                    'Вандалізм' => 'Фасад будівлі пошкоджено невідомими особами. Є фото та свідки.',
                    'Пошкодження майна орендодавця' => 'Під час оренди пошкоджено меблі/побутову техніку. Складено акт.',
                    'Псування майна орендарем' => 'Виявлено псування майна внаслідок неналежного користування.',

                    // будівництво
                    'Пошкодження техніки' => 'Пошкоджено будівельну техніку під час робіт. Проведено огляд.',
                    'Падіння конструкції' => 'Відбулося часткове обвалення конструкції. Територію огороджено.',
                    'Травма працівника' => 'Під час робіт працівник отримав травму. Надано першу допомогу.',
                    'Порушення технології робіт' => 'Виявлено порушення технологічного процесу, що спричинило збитки.',

                    // зброя / гаджети
                    'Втрата зброї' => 'Повідомлено про втрату зброї. Подано заяву до відповідних органів.',
                    'Крадіжка сейфу' => 'Зафіксовано крадіжку сейфу з майном. Проводиться розслідування.',
                    'Нещасний випадок зі зброєю' => 'Стався інцидент під час поводження зі зброєю. Постраждалих оглянуто.',
                    'Пошкодження під час зберігання' => 'Виявлено пошкодження під час тривалого зберігання.',
                    'Крадіжка телефону' => 'Викрадено мобільний телефон у громадському місці. Заява до поліції подана.',
                    'Падіння і розбиття екрана' => 'Пристрій впав, екран розбитий. Потрібна заміна дисплея.',
                    'Потрапляння вологи' => 'Пристрій потрапив у воду, відмовляє плата живлення.',
                    'Пошкодження акумулятора' => 'Виявлено здуття/несправність акумулятора. Необхідна заміна.',

                    // здоров'я / життя
                    'Госпіталізація' => 'Клієнта госпіталізовано для подальшого обстеження та лікування.',
                    'Операція' => 'Проведено хірургічне втручання за показами лікаря.',
                    'Стаціонарне лікування' => 'Пацієнт проходить лікування у стаціонарі згідно з протоколом.',
                    'Амбулаторне лікування' => 'Надано амбулаторну допомогу, призначено терапію.',
                    'Діагностика' => 'Виконано діагностичні обстеження за призначенням лікаря.',
                    'Ліки за рецептом' => 'Придбано лікарські засоби за рецептом, підтверджено чеками.',
                    'Лікування карієсу' => 'Проведено лікування карієсу, надано рахунки клініки.',
                    'Видалення зуба' => 'Зуб видалено за показами, надано післяопераційні рекомендації.',
                    'Протезування' => 'Виконано протезування, додано гарантійні документи.',
                    'Травма зубів' => 'Отримано травму зубів у побуті, проведено лікування.',
                    'Травма' => 'Отримано побутову травму. Надано медичну допомогу.',
                    'Перелом' => 'Діагностовано перелом, проведено іммобілізацію.',
                    'Опік' => 'Отримано термічний опік. Надано допомогу та призначено лікування.',
                    'Травма на виробництві' => 'Травма під час виконання службових обов’язків. Складено акт.',
                    'Травма у ДТП' => 'Отримано травми внаслідок ДТП. Викликана швидка допомога.',
                    'Швидка допомога' => 'Надано екстрену допомогу на місці події.',
                    'Діагностика після ДТП' => 'Проведено обстеження після ДТП. Встановлено діагноз.',
                    'Догляд вдома' => 'Організовано догляд вдома, призначено сестринський нагляд.',
                    'Сестринський догляд' => 'Здійснюється професійний сестринський догляд.',
                    'Паліативний догляд' => 'Надано паліативну допомогу згідно протоколів.',
                    'Діагноз онкології' => 'Підтверджено онкологічний діагноз, розпочато лікування.',
                    'Інфаркт' => 'Встановлено діагноз інфаркту. Надано ургентну допомогу.',
                    'Інсульт' => 'Діагностовано інсульт. Пацієнт проходить реабілітацію.',
                    'Ниркова недостатність' => 'Діагностовано ниркову недостатність, проводиться терапія.',
                    'Інвалідність' => 'Встановлено групу інвалідності згідно МСЕК.',
                    'Смерть застрахованої особи' => 'Підтверджено страхову подію зі смертельним наслідком.',

                    // подорожі
                    'Втрата багажу' => 'Під час подорожі втрачено багаж. Подано звернення до перевізника.',
                    'Затримка рейсу' => 'Рейс затримано понад встановлену норму. Додано підтвердження авіакомпанії.',
                    'Медична допомога за кордоном' => 'За кордоном надано медичну допомогу, є рахунки клініки.',
                    'Скасування поїздки' => 'Поїздку скасовано з поважних причин. Додано підтвердні документи.',

                    // тварини
                    'Хірургічне втручання' => 'Тварині виконано операцію у ветеринарній клініці.',
                    'Отруєння' => 'У тварини ознаки отруєння, проведено лікування.',
                    'Травма тварини' => 'Тварина отримала травму, надано допомогу.',
                    'Інфекційне захворювання' => 'Діагностовано інфекційне захворювання, триває лікування.',
                    'Укус собаки' => 'Собака вкусила третю особу. Надано допомогу потерпілому.',
                    'Пошкодження майна третіх осіб' => 'Тварина пошкодила майно третіх осіб. Власник несе відповідальність.',
                    'Травма перехожого' => 'Під час прогулянки тварина травмувала перехожого.',
                    'Інша подія' => 'Сталася страхова подія. Клієнт звернувся по відшкодування.',
                ];

                $productCauses = $causesMap[$productName] ?? [];

                if (mt_rand(1, 10) === 1) {
                    $cause = 'Інша подія';
                } else {
                    if (empty($productCauses)) {
                        $allCauses = collect($causesMap)->flatten()->filter(fn($c) => $c !== 'Інша подія')->values()->all();
                        $cause = $faker->randomElement($allCauses);
                    } else {
                        $cause = $faker->randomElement($productCauses);
                    }
                }

                $description = $descriptionMap[$cause]
                    ?? ('Сталася подія: ' . mb_strtolower($cause) . '. Подано заяву на відшкодування.');

                $lossLocation = $faker->city() . ', вул. ' . $faker->streetName() . ', ' . $faker->buildingNumber();

                $description = $descriptionMap[$cause]
                    ?? ('Сталася подія: ' . mb_strtolower($cause) . '. Подано заяву на відшкодування.');

                $lossLocation = $faker->city() . ', вул. ' . $faker->streetName() . ', ' . $faker->buildingNumber();

                $effective = Carbon::parse($policy->effective_date);
                $expiration = Carbon::parse($policy->expiration_date);

                $lossDate = Carbon::instance($faker->dateTimeBetween(
                    $effective,
                    $expiration->copy()->subDays(1)
                ));

                $reportedAt = (clone $lossDate)->addDays(rand(0, 7));
                if ($reportedAt->greaterThan($expiration) || $reportedAt->greaterThan(now())) {
                    $reportedAt = now()->copy()->subHours(rand(0, 48));
                }

                $maxClaim = $policy->coverage_amount ?: 50000;
                $amountClaimed = round($faker->numberBetween(3000, max(5000, (int)$maxClaim)), 2);
                $amountReserve = round($amountClaimed * rand(50, 100) / 100, 2);

                $statusPool = [
                    'на розгляді' => 40,
                    'схвалено' => 30,
                    'виплачено' => 25,
                    'відхилено' => 5
                ];

                $roll = rand(1, array_sum($statusPool));
                $cursor = 0;
                $status = 'на розгляді';
                foreach ($statusPool as $s => $w) {
                    $cursor += $w;
                    if ($roll <= $cursor) {
                        $status = $s;
                        break;
                    }
                }

                switch ($status) {
                    case 'на розгляді':
                        $amountPaid = 0.00;
                        break;

                    case 'схвалено':
                        $amountPaid = round($amountReserve * rand(80, 100) / 100, 2);
                        break;

                    case 'виплачено':
                        $amountPaid = round($amountReserve * rand(80, 110) / 100, 2);
                        break;

                    case 'відхилено':
                        $amountPaid = 0.01;
                        break;
                }

                $claims[] = [
                    'claim_number' => 'CLM-' . strtoupper(Str::random(12)),
                    'policy_id' => $policy->id,
                    'reported_by_id' => count($managers)
                        ? $faker->randomElement($managers)
                        : $adminId,
                    'status' => $status,
                    'reported_at' => $reportedAt,
                    'loss_occurred_at' => $lossDate,
                    'loss_location' => $lossLocation,
                    'cause' => $cause,
                    'amount_claimed' => $amountClaimed,
                    'amount_reserve' => $amountReserve,
                    'amount_paid' => $amountPaid,
                    'description' => $description,
                    'metadata' => null,
                    'created_at' => now(),
                    'updated_at' => now(),
                ];
            }
        }

        usort(
            $claims,
            fn($a, $b) =>
            Carbon::parse($a['reported_at'])->lessThan(Carbon::parse($b['reported_at'])) ? -1 : 1
        );


        $internalNotesMap = [
            'Потрібна перевірка коректності дати події — клієнт назвав різні варіанти.',
            'Необхідно узгодити рішення з керівником відділу врегулювання.',
            'Фото пошкоджень виглядають підозріло — варто перевірити повторно.',
            'Клієнт раніше вже подавав подібну заяву, треба переглянути історію.',
            'Можливий шахрайський випадок, передати у юридичний відділ.',
            'Потрібна додаткова експертиза для підтвердження причин пошкодження.',
            'Клієнт вказав суперечливі дані у формі — уточнити перед підтвердженням.',
            'Заявлена сума відшкодування перевищує суму покриття — потрібне погодження.',
            'Виникла розбіжність між політикою і реальними даними страхувальника.',
            'Клієнт емоційно налаштований, бажано передати кейс іншому менеджеру.',
        ];

        $externalNotesMap = [
            'Клієнт просить надіслати рішення поштою на домашню адресу.',
            'Клієнт наполіг отримати копію договору на папері.',
            'Заявник попросив зв’язатися з ним після 18:00.',
            'Просить повідомити результат розгляду SMS-повідомленням.',
            'Клієнт попросив направити копію листа на іншу електронну адресу.',
            'Просить передати документи через представника, має довіреність.',
            'Попросив не телефонувати на робочий номер, тільки особистий.',
            'Клієнт бажає отримати виплату готівкою у відділенні.',
            'Попросив пришвидшити розгляд через термінову потребу у коштах.',
            'Заявник зазначив, що рішення бажає отримати також у паперовому вигляді.',
        ];

        foreach ($claims as $data) {
            $claim = Claim::create($data);

            if (rand(0, 1)) {
                ClaimNote::create([
                    'claim_id' => $claim->id,
                    'user_id' => $claim->reported_by_id ?? $adminId,
                    'visibility' => 'внутрішня',
                    'note' => $internalNotesMap[array_rand($internalNotesMap)],
                ]);
            }

            if (rand(0, 1)) {
                ClaimNote::create([
                    'claim_id' => $claim->id,
                    'user_id' => $claim->reported_by_id ?? $adminId,
                    'visibility' => 'зовнішня',
                    'note' => $externalNotesMap[array_rand($externalNotesMap)],
                ]);
            }
        }
    }
}
